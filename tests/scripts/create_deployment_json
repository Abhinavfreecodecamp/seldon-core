#!/usr/bin/env python
import os
import sys, getopt, argparse
import logging
from random import randint,random
import json



if __name__ == '__main__':
    import logging
    logger = logging.getLogger()
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(name)s : %(message)s', level=logging.DEBUG)
    logger.setLevel(logging.INFO)

    parser = argparse.ArgumentParser(prog='create_deployment')
    parser.add_argument('--input', help='input JSON template', default="config/single_model.json.tmpl")
    parser.add_argument('--output', help='output JSON template', default="config/_deployment.json")
    parser.add_argument('--deployment-id', help='deployment id', default="1")
    parser.add_argument('--project-name', help='project name', default="FX Market Prediction")
    parser.add_argument('--oauth-key', help='oauth key', default="oauth-key")
    parser.add_argument('--oauth-secret', help='oauth secret', default="oauth-secret")
    parser.add_argument('--predictor-name', help='predictor name', default="simple model")
    parser.add_argument('--predictor-version', help='predictor version', default="v1")
    parser.add_argument('--model-name', help='model name', action='append')
    parser.add_argument('--model-image', help='model image', action='append')
    parser.add_argument('--model-version', help='model version', action='append')
    args = parser.parse_args()
    opts = vars(args)

    with open(args.input) as data_file:    
        data=data_file.read()
        data = data.replace("{{deployment_id}}",args.deployment_id)
        data = data.replace("{{project_name}}",args.project_name)
        data = data.replace("{{oauth_key}}",args.oauth_key)
        data = data.replace("{{oauth_secret}}",args.oauth_secret)
        data = data.replace("{{predictor_name}}",args.predictor_name)
        data = data.replace("{{predictor_version}}",args.predictor_version)
        if not args.model_image is None:
            for i in range(0,len(args.model_image)):
                data = data.replace("{{model_image_%d}}" % (i+1),args.model_image[i])
                data = data.replace("{{model_version_%d}}" % (i+1),args.model_version[i])
                data = data.replace("{{model_name_%d}}" % (i+1),args.model_name[i])
        else:
            data = data.replace("{{model_image_1}}","seldonio/mean_classifier")
            data = data.replace("{{model_version_1}}","0.5")
            data = data.replace("{{model_name_1}}","My Model")

        data = json.loads(data)
        data_str = json.dumps(data, indent=4, sort_keys=True)
        print data_str
        with open(args.output,"w") as fout:
            fout.write(data_str)

