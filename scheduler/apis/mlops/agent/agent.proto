syntax = "proto3";

package seldon.mlops.agent;

option go_package = "github.com/seldonio/seldon-core/scheduler/apis/mlops/agent";

// [START Messages]

message LoadModelRequest {
  string modelName = 1;
  optional string storageURI = 2; // storage uri for model artifacts
  optional string storageSecretName = 3; // k8s secret name for authentication to storage uri
  bool async = 4; // perform asynchronously (result will be sent on subscription channel)
}

message LoadModelResponse {
  enum Event {
      UNKNOWN_EVENT = 0;
      LOAD_STARTED = 1;
      LOADED = 2;
     }
  Event event = 2;
}

message UnloadModelRequest {
  string modelName = 1;
  bool remove = 2; // remove from local storage
  bool async = 3; // perform asynchronously (result will be sent on subscription channel)
}

message UnloadModelResponse {
  enum Event {
      UNKNOWN_EVENT = 0;
      UNLOAD_STARTED = 1; // For async load case
      UNLOADED = 2;
     }
  Event event = 2;
}

message SubscriptionRequest {
}

message ModelEventMessage {
  string modelName = 1;
  enum Event {
      UNKNOWN_EVENT = 0;
      LOADED = 1;
      LOAD_FAILED = 2;
      UNLOADED = 3;
      UNLOAD_FAILED = 4;
      REMOVED = 5; // unloaded and removed from local PVC
      REMOVE_FAILED = 6;
      AUTOSCALE_ALERT = 7;
      }
  Event event = 2;
  string message = 3;
}

// [END Messages]

// [START Services]

service Agent {
  rpc LoadModel(LoadModelRequest) returns (LoadModelResponse) {};
  rpc UnloadModel(UnloadModelRequest) returns (UnloadModelResponse) {};
  rpc Subscribe(SubscriptionRequest) returns (stream ModelEventMessage) {};
}

// [END Services]
