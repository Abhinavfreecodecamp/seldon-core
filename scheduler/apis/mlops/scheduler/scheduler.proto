syntax = "proto3";

package seldon.mlops.scheduler;

option go_package = "github.com/seldonio/seldon-core/scheduler/apis/mlops/scheduler";

// [START Messages]

/* ServerDetails represents a new or updated model server
*/
message ServerDetails {
  string name = 1;
  repeated ServerReplica replicas = 2;
  int32 memory = 3; // The memory capacity of the server
  repeated string capabilities = 4; // The list of capabilities of the server, e.g. sklearn, pytorch, xgboost, mlflow
}

/* ServerReplica represents a server instance
*/
message ServerReplica {
  string inferenceSvc = 1; // inference DNS service name
  int32 inferencePort = 2; // inference port
  int32 agentPort = 3; // agent port
}

message AddServerResponse {
}


/* ServerReference represents a unique server
*/
message ServerReference {
  string name = 1;
}

message RemoveServerResponse {
}

/* ModelDetails
*/
message ModelDetails {
  string name = 1; // name of the model
  string uri = 2; // storage uri from where to download the artifacts
  optional string storageSecretName = 3; // optional k8s secret name for authentication to storage uri
  repeated string requirements = 4; // list of capabilities the server must satisfy to run this model
  int32 memory = 5; // Memory required to run model
  int32 replicas = 6; // number of replicas of model to create
  optional string server = 7; // the particualar model server to load the model. If unspecified will be chosen.
}

message LoadModelResponse {
}

/* ModelReference represents a unique model
*/
message ModelReference {
  string name = 1;
}

message UnloadModelResponse {
}

/* ModelStatusResponse provides the current assignment of the model onto a server
*/
message ModelStatusResponse {
  string modelName = 1;
  string serverName = 2;
  repeated int32 assignment = 3;
}

/* ServerStatusResponse provides details of current server status
*/
message ServerStatusResponse {
  string serverName = 1;
  repeated string loadedModels = 2;
  repeated ServerResources resources = 3;
}

message ServerResources {
  int32 memory = 1;
  int32 usedActiveMemory = 2;
  int32 usedInactiveMemory = 3;
}
// [END Messages]


// [START Services]

service Scheduler {
  rpc AddServer(ServerDetails) returns (AddServerResponse) {};
  rpc RemoveServer(ServerReference) returns (RemoveServerResponse) {};
  rpc ServerStatus(ServerReference) returns (ServerStatusResponse) {}

  rpc LoadModel(ModelDetails) returns (LoadModelResponse) {};
  rpc UnloadModel(ModelReference) returns (UnloadModelResponse) {};
  rpc ModelStatus(ModelReference) returns (ModelStatusResponse) {}
}

// [END Services]
